**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "table",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
package com.{{#lowercase project.name}}{{/lowercase}}.db.{{#lowercase db.name}}{{/lowercase}}.dtos.base;

/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
                                                                                   
 * DO NOT EDIT THIS FILE!! 
 *
 *  FOR CUSTOMIZE {{capitalize entity.name}}BaseDto PLEASE EDIT ../{{capitalize entity.name}}Dto.java
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER CODE GENERATION --
 * 
 */
 

/**
 * This is the dto of {{capitalize entity.name}} object
 * 
 */

import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import com.{{lowercase project.name}}.db.{{lowercase db.name}}.entity.{{capitalize entity.name}};
{{#equal entity.name 'User'}}
import com.{{lowercase project.name}}.db.{{lowercase db.name}}.dtos.infos.RolesInfo;
{{/equal}}
// Import relations
{{#each entity._relations}}{{#equal type "1:m"}}{{#equal _ent1.name ../entity.name}}import com.{{lowercase ../project.name}}.db.{{lowercase ../db.name}}.dtos.infos.{{capitalize _ent2.name}}Info;
{{/equal}}
{{#notEqual _ent1.name ../entity.name}}
import com.{{lowercase ../project.name}}.db.{{lowercase ../db.name}}.dtos.infos.{{capitalize _ent1.name}}Info;
{{/notEqual}}{{/equal}}
{{/each}}
{{#each entity._relations}}{{#equal type "m:m"}}{{#equal _ent1.name ../entity.name}}import com.{{lowercase ../project.name}}.db.{{lowercase ../db.name}}.dtos.infos.{{capitalize _ent2.name}}Info;
{{/equal}}
{{#notEqual _ent1.name ../entity.name}}
import com.{{lowercase ../project.name}}.db.{{lowercase ../db.name}}.dtos.infos.{{capitalize _ent1.name}}Info;
{{/notEqual}}{{/equal}}
{{/each}}

public class {{capitalize entity.name}}BaseDto {
	
	private Long _id;
	
	// Attributes
	{{#equal entity.name 'User'}}
	private String username;
    private String password;
    private String token;
    private List<String> roles = new ArrayList<>();
    {{#each entity._attrs}}
    {{#notEqual name 'username'}}
    {{#notEqual name 'password'}}
    {{#notEqual name 'roles'}}
    {{#notEqual name 'token'}}
    {{#notEqual name '_id'}}
    private {{toJavaType type}} {{name}};
    {{/notEqual}}
    {{/notEqual}}
    {{/notEqual}}
    {{/notEqual}}
    {{/notEqual}}
    {{/each}}
	{{/equal}}
	{{#notEqual entity.name 'User'}}
    {{#each entity._attrs}}
    private {{toJavaType type}} {{name}};
    {{/each}}
	{{/notEqual}}
	{{#each entity._relations}}{{#equal type "1:m"}}{{#equal _ent1.name ../entity.name}}
	// Relations {{name}}
	private Long {{name}};
	{{/equal}}{{#notEqual _ent1.name ../entity.name}}
	// Relations {{_ent1.name}}
	private List<Long> {{name}}_{{_ent1.name}} = new ArrayList<>();
	{{/notEqual}}{{/equal}}{{/each}}
	{{#each entity._relations}}{{#equal type "m:m"}}{{#equal _ent1.name ../entity.name}}
	// Relations m:m {{name}}
	private List<String> {{name}} = new ArrayList<>();
	{{/equal}}
	{{#notEqual _ent1.name ../entity.name}}
private List<{{capitalize _ent1.name}}Info> {{_ent1.name}}s = new ArrayList<>();
	{{/notEqual}}
	{{/equal}}{{/each}}
	
	public Long get_id() {
		return _id;
	}

	public void set_id(Long id) {
		this._id = id;
	}
	
	{{#equal entity.name 'User'}}
	public String getToken() {
		return token;
	}
	public void setToken(String token) {
		this.token = token;
	}
	{{#each entity._attrs}}
	{{#equal name 'roles'}}
	public List<String> get{{capitalize name}}() {
		return {{name}};
	}


	public void set{{capitalize name}}(List<RolesInfo> {{name}}) {
		this.{{name}} = {{name}}.stream().map(el -> el.getRole()).collect(Collectors.toList());
	}
	{{/equal}}
	{{#notEqual name 'roles'}}
	public {{type}} get{{capitalize name}}() {
		return {{name}};
	}


	public void set{{capitalize name}}({{type}} {{name}}) {
		this.{{name}} = {{name}};
	}
	{{/notEqual}}
    {{/each}}
	{{/equal}}
	{{#notEqual entity.name 'User'}}
	{{#each entity._attrs}}
	public {{toJavaType type}} get{{capitalize name}}() {
		return {{name}};
	}

	public void set{{#capitalize name}}{{/capitalize}}({{toJavaType type}} {{name}}) {
		this.{{name}} = {{name}};
	}
    {{/each}}
	{{/notEqual}}
    {{#each entity._relations}}{{#equal type "1:m"}}{{#equal _ent1.name ../entity.name}}
	public void set{{capitalize name}}({{capitalize _ent2.name}}Info {{name}}) {
		this.{{name}} = {{name}}.get_id();
	}

	public Long get{{capitalize name}}() {
		return {{name}};
	}
	{{/equal}}{{#notEqual _ent1.name ../entity.name}}
	// Relations {{_ent1.name}}
	
	public List<Long> get{{name}}_{{_ent1.name}}() {
		return this.{{name}}_{{_ent1.name}};
	}

    public void set{{name}}_{{_ent1.name}}(List<{{capitalize _ent1.name}}Info> list) {
		this.{{name}}_{{_ent1.name}} = list.stream()
				.map(el -> el.get_id())
				.collect(Collectors.toList());
	}

	{{/notEqual}}{{/equal}}{{/each}}

    {{#each entity._relations}}{{#equal type "m:m"}}{{#equal _ent1.name ../entity.name}}
	
	public List<String> get{{capitalize name}}() {
		return this.{{name}};
	}

	public void set{{capitalize name}}(List<{{capitalize _ent2.name}}Info> {{name}}) {
		{{name}}.forEach(actor -> {
			this.{{name}}.add(String.valueOf(actor.get_id()));
		});
	}

	{{/equal}}{{#notEqual _ent1.name ../entity.name}}
	// Relations {{_ent1.name}}

	public List<{{capitalize _ent1.name}}Info> get{{capitalize name}}s() {
		return this.{{_ent1.name}}s;
	}

	public void set{{capitalize name}}s(List<{{capitalize _ent1.name}}Info> list) {
		this.{{_ent1.name}}s = list;
	}
	{{/notEqual}}{{/equal}}{{/each}}
}