**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "table",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
package com.{{#lowercase project.name}}{{/lowercase}}.db.{{#lowercase db.name}}{{/lowercase}}.entity.base;

/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
                                                                                   
 * DO NOT EDIT THIS FILE!! 
 *
 *  FOR CUSTOMIZE {{capitalize entity.name}}Base PLEASE EDIT ../{{capitalize entity.name}}.java
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER CODE GENERATION --
 * 
 */
 

/**
 * This is the model of {{capitalize entity.name}} object
 * 
 */

import javax.persistence.GeneratedValue;
import javax.persistence.MappedSuperclass;
import javax.persistence.Id;
import javax.persistence.Column;
import java.util.Date;
import javax.persistence.ManyToOne;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.FetchType;
import java.util.stream.Collectors;
import com.{{#lowercase project.name}}{{/lowercase}}.db.{{#lowercase db.name}}{{/lowercase}}.entity.{{capitalize entity.name}};
{{#equal entity.name 'User'}}
import com.{{#lowercase project.name}}{{/lowercase}}.db.{{#lowercase db.name}}{{/lowercase}}.entity.Roles;
{{/equal}}
// Import relations
{{#each entity._relations}}{{#equal type "1:m"}}{{#equal _ent1.name ../entity.name}}import com.{{#lowercase ../project.name}}{{/lowercase}}.db.{{#lowercase ../db.name}}{{/lowercase}}.entity.{{capitalize _ent2.name}};
{{/equal}}
{{#notEqual _ent1.name ../entity.name}}
import com.{{#lowercase ../project.name}}{{/lowercase}}.db.{{#lowercase ../db.name}}{{/lowercase}}.entity.{{capitalize _ent1.name}};
{{/notEqual}}{{/equal}}
{{/each}}
{{#each entity._relations}}{{#equal type "m:m"}}{{#equal _ent1.name ../entity.name}}import com.{{#lowercase ../project.name}}{{/lowercase}}.db.{{#lowercase ../db.name}}{{/lowercase}}.entity.{{capitalize _ent2.name}};
{{/equal}}
{{#notEqual _ent1.name ../entity.name}}
import com.{{#lowercase ../project.name}}{{/lowercase}}.db.{{#lowercase ../db.name}}{{/lowercase}}.entity.{{capitalize _ent1.name}};
{{/notEqual}}{{/equal}}
{{/each}}


@MappedSuperclass
public class {{capitalize entity.name}}Base {
	
	@Id
	@GeneratedValue
	private Long _id;
	
	// Attributes
	{{#equal entity.name 'User'}}
	@Column(nullable=false)
	private String username;
	@Column(nullable=false)
    private String password;
    private String token;
	@OneToMany(mappedBy="user", fetch = FetchType.LAZY) 
    private List<Roles> roles = new ArrayList<>();;
    {{#each entity._attrs}}
    {{#notEqual name 'username'}}
    {{#notEqual name 'password'}}
    {{#notEqual name 'roles'}}
    {{#notEqual name 'token'}}
    {{#notEqual name '_id'}}
	@Column({{#required}}nullable=false{{#equal unique true}},{{/equal}}{{/required}}{{#equal unique true}}unique=true{{/equal}})
    private {{toJavaType type}} {{name}};
    {{/notEqual}}
    {{/notEqual}}
    {{/notEqual}}
    {{/notEqual}}
    {{/notEqual}}
    {{/each}}
	{{/equal}}
	{{#notEqual entity.name 'User'}}
    {{#each entity._attrs}}
	@Column({{#required}}nullable=false{{#equal unique true}},{{/equal}}{{/required}}{{#equal unique true}}unique=true{{/equal}})
    private {{toJavaType type}} {{name}};
    {{/each}}
	{{/notEqual}}
	{{#each entity._relations}}{{#equal type "1:m"}}{{#equal _ent1.name ../entity.name}}
	// Relations {{name}}
	@ManyToOne(fetch = FetchType.LAZY)
	private {{capitalize _ent2.name}} {{name}};
	{{/equal}}{{#notEqual _ent1.name ../entity.name}}
	// Relations {{_ent1.name}}
	@OneToMany(mappedBy="{{name}}")
	private List<{{capitalize _ent1.name}}> {{name}}_{{_ent1.name}} = new ArrayList<>();
	{{/notEqual}}{{/equal}}{{/each}}
	{{#each entity._relations}}{{#equal type "m:m"}}{{#equal _ent1.name ../entity.name}}
	// Relations m:m {{name}}
	@ManyToMany()
	@JoinTable(name="{{_ent1.name}}_{{_ent2.name}}",
		joinColumns = @JoinColumn(name="{{_ent1.name}}_ID"),
		inverseJoinColumns = @JoinColumn(name="{{_ent2.name}}_ID")
			)
	private List<{{capitalize _ent2.name}}> {{name}} = new ArrayList<>();
	{{/equal}}
	{{#notEqual _ent1.name ../entity.name}}
@ManyToMany(mappedBy="{{name}}")
	private List<{{capitalize _ent1.name}}> {{_ent1.name}}s = new ArrayList<>();
	{{/notEqual}}
	{{/equal}}{{/each}}
	
	public Long get_id() {
		return _id;
	}

	public void set_id(Long id) {
		this._id = id;
	}
	
	{{#equal entity.name 'User'}}
	public String getToken() {
		return token;
	}
	public void setToken(String token) {
		this.token = token;
	}
	{{#each entity._attrs}}
	{{#equal name 'roles'}}
	public List<Roles> get{{#capitalize name}}{{/capitalize}}() {
		return {{name}};
	}

	public void set{{capitalize name}}(List<String> {{name}}) {
		this.{{name}} = {{name}}.stream()
				.map(el -> new Roles(el))
				.collect(Collectors.toList());;
	}

	public void addRoles(Roles role) {
		this.roles.add(role);
	}
	{{/equal}}
	{{#notEqual name 'roles'}}
	public {{type}} get{{#capitalize name}}{{/capitalize}}() {
		return {{name}};
	}

	public void set{{capitalize name}}({{type}} {{name}}) {
		this.{{name}} = {{name}};
	}
	{{/notEqual}}
    {{/each}}
	{{/equal}}
	{{#notEqual entity.name 'User'}}
	{{#each entity._attrs}}
	public {{toJavaType type}} get{{#capitalize name}}{{/capitalize}}() {
		return {{name}};
	}

	public void set{{#capitalize name}}{{/capitalize}}({{toJavaType type}} {{name}}) {
		this.{{name}} = {{name}};
	}
    {{/each}}
	{{/notEqual}}
	{{#equal entity.name 'User'}}
	public boolean hasRole(String role) {
		List<String> lista = roles.stream()
				.map(Roles::getRole)
				.collect(Collectors.toList());
		return lista.indexOf(role) != -1;
	}
	{{/equal}}
    {{#each entity._relations}}{{#equal type "1:m"}}{{#equal _ent1.name ../entity.name}}
	public void set{{capitalize _ent2.name}}(String {{name}}) {
		this.{{name}} = new {{capitalize _ent2.name}}({{name}});
	}

	public {{capitalize _ent2.name}} get{{capitalize name}}() {
		return {{name}};
	}
	{{/equal}}{{#notEqual _ent1.name ../entity.name}}
	// Relations {{_ent1.name}}
	
	public List<{{capitalize _ent1.name}}> get{{capitalize _ent1.name}}() {
		return this.{{name}}_{{_ent1.name}};
	}

	public void add{{capitalize _ent1.name}}({{capitalize _ent1.name}} {{_ent1.name}}) {
		this.{{name}}_{{_ent1.name}}.add({{_ent1.name}});
	}

	public void remove{{capitalize _ent1.name}}({{capitalize _ent1.name}} {{_ent1.name}}) {
		this.{{name}}_{{_ent1.name}}.remove({{_ent1.name}});
	}
	{{/notEqual}}{{/equal}}{{/each}}

    {{#each entity._relations}}{{#equal type "m:m"}}{{#equal _ent1.name ../entity.name}}
	
	public List<{{capitalize _ent2.name}}> get{{capitalize name}}() {
		return this.{{name}};
	}

	public void add{{capitalize name}}({{capitalize _ent2.name}} {{_ent2.name}}) {
		this.{{name}}.add({{_ent2.name}});
	}

	public void set{{capitalize name}}(List<String> {{camelcase _ent2.name}}) {
		this.{{name}} = {{camelcase _ent2.name}}.stream()
			.map(id -> new {{capitalize _ent2.name}}(id))
			.collect(Collectors.toList());
	}

	public void remove{{capitalize name}}({{capitalize _ent2.name}} {{_ent2.name}}) {
		this.{{name}}.remove({{_ent2.name}});
	}
	{{/equal}}{{#notEqual _ent1.name ../entity.name}}
	// Relations {{_ent1.name}}

	public List<{{capitalize _ent1.name}}> get{{capitalize _ent1.name}}() {
		return this.{{_ent1.name}}s;
	}

	public void add{{capitalize _ent1.name}}({{capitalize _ent1.name}} {{_ent1.name}}) {
		this.{{_ent1.name}}s.add({{_ent1.name}});
	}

	public void remove{{capitalize _ent1.name}}({{capitalize _ent1.name}} {{_ent1.name}}) {
		this.{{_ent1.name}}s.remove({{_ent1.name}});
	}
	{{/notEqual}}{{/equal}}{{/each}}
}